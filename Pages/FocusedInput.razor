@inject IJSRuntime JSRuntime

<input type="text" @ref="InputElement" @attributes="Attributes" @oninput="OnValueInput" @onchange="OnValueChanged"
    value="@Value" />

@code {
    private ElementReference InputElement { get; set; }

    [Parameter]
    public string Value { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<string> ValueInput { get; set; }

    [Parameter]
    public bool Focus { get; set; } = true;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? Attributes { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Focus) 
        {
             await JSRuntime.InvokeVoidAsync("focus", InputElement);
        }
    }

    private Task OnValueInput(ChangeEventArgs e)
    {
        Value = e.Value.ToString();
        return ValueInput.InvokeAsync(Value);
    }

    private Task OnValueChanged(ChangeEventArgs e)
        => ValueChanged.InvokeAsync(e.Value.ToString());
}