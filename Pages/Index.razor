@inherits SyncableComponentBase
@page "/"

<form class="row">
        <div class="col-12 col-md-6">
            @if (Error != null)
            {
                <div class="alert alert-danger">
                    @Error
                </div>
            }
            
            <div class="row">
                <div class="form-group col-12 col-lg-6">
                    <label for="@nameof(Title)" class="h5">@nameof(Title)</label>
                    <input id="@nameof(Title)" @bind-value="Title" @bind-value:event="oninput"
                        class="form-control border border-primary" />
                </div>
                <div class="form-group col-12 col-lg-6">
                    <label for="@nameof(Shortcut)" class="h5">@nameof(Shortcut)</label>
                    <input id="@nameof(Shortcut)" @bind-value="Shortcut" @bind-value:event="oninput"
                        class="form-control border border-primary" />
                </div>
                <div class="form-group col-12 col-lg-6">
                    <label for="@nameof(Language)" class="h5">@nameof(Language)</label>
                    <input id="@nameof(Language)" @bind-value="Language" @bind-value:event="oninput"
                        list="@nameof(Constants.Languages)" class="form-control border border-primary" />

                    <datalist id="@nameof(Constants.Languages)">
                        @foreach (var language in Constants.Languages.All)
                        {
                            <option value="@language" />
                        }
                    </datalist>
                </div>
                <div class="col-12 col-lg-6 mb-3 mb-lg-0">
                    <h2 class="h5">@nameof(Constants.SnippetTypes).ToSeparateWords()</h2>
                    <div class="form-check">
                        <input id="@nameof(IsExpansion)" @bind="IsExpansion" type="checkbox" class="form-check-input">
                        <label class="form-check-label" for="@nameof(IsExpansion)">
                            @Constants.SnippetTypes.Expansion
                        </label>
                    </div>
                    <div class="form-check">
                        <input id="@nameof(IsSurroundsWith)" @bind="IsSurroundsWith" type="checkbox"
                            class="form-check-input">
                        <label class="form-check-label" for="@nameof(IsSurroundsWith)">
                            @Constants.SnippetTypes.SurroundsWith
                        </label>
                    </div>
                </div>
                <div class="form-group col-12 col-lg-6">
                    <label for="@nameof(Description)" class="h5">@nameof(Description)</label>
                    <input id="@nameof(Description)" @bind-value="Description" @bind-value:event="oninput"
                        class="form-control" />
                </div>
                <div class="form-group col-12 col-lg-6">
                    <label for="@nameof(Author)" class="h5">@nameof(Author)</label>
                    <input id="@nameof(Author)" @bind-value="Author" @bind-value:event="oninput"
                        class="form-control" />
                </div>
            </div>
            <div>
                <div class="d-flex justify-content-between">
                    <h2 class="h5">@nameof(Imports)</h2>
                    <button type="button" @onclick="AddImport" title="Add Import"
                        class="btn btn-link btn-sm text-decoration-none text-primary p-0">
                        ➕
                    </button>
                </div>
                <div> 
                    @foreach (var import in Imports)
                    {
                        <div class="form-group">
                            <label for="@import.UIIdentifier" class="small">
                                @nameof(import.Namespace)
                            </label>
                            <FocusedInput id="@import.UIIdentifier" class="form-control"
                                @oninput="@(e => SetImport(import, (string)e.Value))"
                                @onblur="@(_ => RemoveImportIfEmpty(import))" />
                        </div>
                    }

                    @if (Imports.Count == 0)
                    {
                        <p>
                            Click <i>plus</i> button to add <i>@nameof(Import)</i>.
                        </p>
                    }
                </div>
            </div>
            <div class="form-check form-check-inline d-flex justify-content-end mr-0">
                <label class="form-check-label mr-2" for="@nameof(SyncEnabled)">
                    @nameof(SyncEnabled).ToSeparateWords()
                </label>
                <input type="checkbox" @bind="SyncEnabled" id="@nameof(SyncEnabled)"
                    class="form-check-input mr-0">
            </div>
            <div class="form-group">
                <label for="@nameof(Code)" class="h5">@nameof(Code)</label>
                <textarea id="@nameof(Code)" rows="20" @bind-value="Code" @bind-value:event="oninput"
                    class="form-control border border-primary"></textarea>
            </div>
    </div>
    <div class="col-12 col-md-6">
        <div>
            <div class="d-flex justify-content-between">
                <h2 class="h5">@nameof(Declarations)</h2>
                <button type="button" @onclick="AddDeclaration" title="Add Declaration"
                    class="btn btn-link btn-sm text-decoration-none text-primary p-0">
                    ➕
                </button>
            </div>
            <div class="row">
                @foreach (var (declaration, i) in Declarations.Select((d, i) => (d, i)))
                {
                    <div class="col-12 col-md-6 col-lg-4">
                        <div class="d-flex justify-content-end">
                            @if (i != 0)
                            {
                                <button @onclick="@(() => MoveDeclarationUp(i))" type="button" title="Move up"
                                    class="btn btn-link btn-sm text-decoration-none text-primary">
                                    ↑
                                </button>
                            }
                            @if (i != Declarations.Count - 1)
                            {
                                <button @onclick="@(() => MoveDeclarationDown(i))" type="button" title="Move down"
                                    class="btn btn-link btn-sm text-decoration-none text-primary">
                                    ↓
                                </button>
                            }
                            <button @onclick="@(() => RemoveDeclaration(declaration))" type="button" title="Remove Declaration"
                                class="btn btn-link btn-sm text-decoration-none text-danger">
                                🗙
                            </button>
                        </div>
                        <div class="form-check form-check-inline d-flex justify-content-end mr-2">
                            <label class="form-check-label small mr-2" for="@declaration.UIIdentifier">
                                @nameof(declaration.Editable)
                            </label>
                            <input id="@declaration.UIIdentifier" type="checkbox" 
                                checked="@declaration.Editable" @onchange="@(e => SetDeclarationEditable(declaration, (bool)e.Value))"
                                class="form-check-input mr-0" />
                        </div>
                        <div class="form-group">
                            <label for="@declaration.UIIdentifier" class="small">
                                @nameof(declaration.Identifier)
                            </label>
                            <FocusedInput id="@declaration.UIIdentifier" value="@declaration.Identifier" Focus="declaration.Focus"
                                @onchange="@(e => SetDeclarationIdentifier(declaration, (string)e.Value))"
                                class="form-control form-control-sm border border-primary" />
                        </div>
                        <div class="form-group">
                            <label for="@declaration.UIIdentifier" class="small">
                                @nameof(declaration.DefaultValue).ToSeparateWords()
                            </label>
                            <input id="@declaration.UIIdentifier" value="@declaration.DefaultValue"
                                @oninput="@(e => SetDefaultDeclarationValue(declaration, (string)e.Value))"
                                class="form-control form-control-sm border border-primary" />
                        </div>
                        <div class="form-group">
                            <label for="@declaration.UIIdentifier" class="small">
                                @nameof(declaration.ToolTip)
                            </label>
                            <input id="@declaration.UIIdentifier" value="@declaration.ToolTip"
                                @oninput="@(e => SetDeclarationToolTip(declaration, (string)e.Value))"
                                class="form-control form-control-sm" />
                        </div>
                        <div class="form-group">
                            <label for="@declaration.UIIdentifier" class="small">
                                @nameof(declaration.Type)
                            </label>
                            <input id="@declaration.UIIdentifier" value="@declaration.Type"
                                @oninput="@(e => SetDeclarationType(declaration, (string)e.Value))"
                                class="form-control form-control-sm" />
                        </div>
                        @if(IsCSharp)
                        {
                            <div class="form-group">
                                <label for="@declaration.UIIdentifier" class="small">
                                    @nameof(declaration.Function)
                                </label>
                                <input id="@declaration.UIIdentifier" value="@declaration.Function"
                                    @oninput="@(e => SetDeclarationFunction(declaration, (string)e.Value))"
                                    list="@nameof(Constants.Functions)" class="form-control form-control-sm" />
                            </div>

                            <datalist id="@nameof(Constants.Functions)">
                                @foreach (var function in Constants.Functions)
                                {
                                    <option value="@function" />
                                }
                            </datalist>
                        }
                    </div>
                }
                
                @if(Declarations.Count == 0)
                {
                    <p class="pl-3">
                        Input <i>$@nameof(Declaration.Identifier)$</i> into <i>@nameof(Code)</i> or click <i>plus</i> button to add <i>@nameof(Declaration)</i>.
                    </p>
                }
            </div>
        </div>
        <div class="form-group">
            <label for="@nameof(SnippetText)" class="h5">@nameof(SnippetText).ToSeparateWords()</label>
            <textarea id="@nameof(SnippetText)" @bind="SnippetText" @ref="SnippetTextTextarea"
                class="form-control border border-primary" rows=29></textarea>
        </div>
        <div class="d-flex justify-content-end">
            <button type="button" @onclick="CopyToClipboardAsync" class="btn btn-primary">Copy to Clipboard!</button>
        </div>
    </div>
</form>